{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","AddTask","setState","tasks","state","RemoveTask","ClearAll","arr","i","push","react_default","a","createElement","Fragment","class","mdbreact_esm","color","onClick","style","width","map","item","type","key","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"sQA2CeA,cAtCb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMRQ,QAAU,kBAAMP,EAAKQ,SAAS,CAACC,MAAOT,EAAKU,MAAMD,MAAQ,KAPvCT,EASlBW,WAAa,kBAAMX,EAAKU,MAAMD,MAAQ,EAAIT,EAAKQ,SAAS,CAACC,MAAOT,EAAKU,MAAMD,MAAQ,IAAMT,EAAKQ,SAAS,CAACC,MAAO,KAT7FT,EAWlBY,SAAW,kBAAMZ,EAAKQ,SAAS,CAACC,MAAO,KATrCT,EAAKU,MAAQ,CACXD,MAAO,GAHOT,wEAchB,IAAMa,EAAM,GACZ,GAAGV,KAAKO,MAAMD,MAAQ,EAAG,IAAI,IAAIK,EAAI,EAAGA,EAAIX,KAAKO,MAAMD,MAAOK,IAAKD,EAAIE,KAAKD,EAAE,GAC9E,OACEE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KAEEH,EAAAC,EAAAC,cAAA,OAAKE,MAAM,iCACTJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAASpB,KAAKI,SAAtC,OACAS,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAASpB,KAAKQ,YAAtC,UACAK,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQC,MAAM,SAASC,QAASpB,KAAKS,UAArC,UAGCT,KAAKO,MAAMD,MAAQ,EAClBO,EAAAC,EAAAC,cAAA,OAAKE,MAAM,6CACTJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAcG,MAAO,CAAEC,MAAO,UAC3BZ,EAAIa,IAAI,SAAAC,GAAI,OAAGX,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAcO,KAAK,YAAWZ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAkBQ,IAAKF,GAAvB,eAA0CA,QAI5F,aAjCMG,aCMZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBnC,QACf6B,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KC5DjEC,IAASC,OAAQtC,EAAAC,EAAAC,cAACqC,EAAD,MAAUC,SAASC,eAAe,SDUpC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,YAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,GAAAwB,OAAMH,YAAN,sBAEN5B,EAwCX,SAAiCO,GAE/ByB,MAAMzB,GACHI,KAAK,SAAAsB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C7B,UAAUC,cAAc6B,MAAM3B,KAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,KAAK,WAC7BT,OAAOC,SAASqC,aAKpBlC,EAAgBC,KAGnBa,MAAM,WACLF,QAAQC,IACN,mEAzDAsB,CAAwBlC,GAHxBD,EAAgBC,MCxBxBmC","file":"static/js/main.9975042f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { MDBBtn, MDBListGroup, MDBListGroupItem, MDBAnimation } from \"mdbreact\";\nimport \"./index.css\";\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      tasks: 0\n    }\n  }\n\n  AddTask = () => this.setState({tasks: this.state.tasks + 1});\n\n  RemoveTask = () => this.state.tasks > 0 ? this.setState({tasks: this.state.tasks - 1}) : this.setState({tasks: 0})\n\n  ClearAll = () => this.setState({tasks: 0});\n\n  render() {\n    const arr = [];\n    if(this.state.tasks > 0) for(let i = 0; i < this.state.tasks; i++) arr.push(i+1);\n    return (\n      <>\n\n        <div class=\"d-flex justify-content-center\">\n          <MDBBtn color=\"primary\" onClick={this.AddTask}>Add</MDBBtn>\n          <MDBBtn color=\"warning\" onClick={this.RemoveTask}>Remove</MDBBtn>\n          <MDBBtn color=\"danger\" onClick={this.ClearAll}>Clear</MDBBtn>\n        </div>\n\n          {this.state.tasks > 0 ? \n            <div class=\"d-flex justify-content-center text-center\">\n              <MDBListGroup style={{ width: \"22rem\"}}>\n                {arr.map(item =><MDBAnimation type=\"bounceIn\"><MDBListGroupItem key={item}>Task number {item}</MDBListGroupItem></MDBAnimation>)}\n              </MDBListGroup>\n            </div>\n          : \n            null}\n      </>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render( <App /> , document.getElementById('root'));\n\nregisterServiceWorker();"],"sourceRoot":""}